
// --- parseProgram
// if true {} // If statement is not allowed in global scope 
// while true {} // While loop is not allowed in global scope 
// for {} // For loop is not allowed in global scope 
// 123 + 3 // Expression is not allowed in global scope

// --- parseExpression
// expr = 32 + // Expected an expression but instead reached the end of the file
// expr = 34 + if // Expected an expression. Instead got [tokenType] 
// expr = root.43 // Expected a member variable of [root] but found [token] instead    

// --- parseModule
modExpr = mod {
    if
    123 + 3 - 10
}
// modExpr = mod 3 // Module must be of the form mod {...}
// modExpr = mod { a = 3 3 + 4 "other" c = 10 } // Expression is not allowed here
// modExpr = mod { a = 10.2 // Unterminated code at end of file. Expected closing }

// --- parseTy
// tyExpr = ty "thing" // Type definition must be of the form ty {...}
// tyExpr = ty { true a = -123 "other" b = false } // Expression is not allowed here
// tyExpr = ty { a = false // Unterminated code at end of file. Expected closing }

// --- parseFunction (parseLeftParenExpression)
// funcExpr = (a: string, if) {} // Function parameter must be a variable declaration 
// funcExpr = (a: string, 3 + 3, b: bool, varName) {} // Expression is not allowed here
// funcExpr = (a: int, )  {} // Expected another function parameter after the comma
// funcExpr = (a: bool 3 + 3) {} // Expected either , or ) in function parameter list
// funcExpr = (a: type // Unterminated code at end of file. Expected another function parameter
// funcExpr = (a: int) :: if // Function shorthand must be in the form (...) :: [return expression]
// funcExpr = (a: bool) // Expected a return type or function block

// --- parseCall
// call = add(3, ) // Expected another expression after the comma
// call = add(3, 5 + 6 while) // Expected either , or ) in call argument list
// call = add(2, 55  // Unterminated code at end of file. Expected another expression

// --- parseTypeInit
// init = Particle.{ a = 3, other, 123, 3 + 5, b = 2 } // Expression is not allowed here
// init = Particle.{ a = 5, b: int = 3 } // Variable declaration is not allowed here
// init = Particle.{ a = 6, b = 5 if if } // Expected either , or }
// init = Particle.{ a = 7 // Unterminated code at end of file. Expected closing }