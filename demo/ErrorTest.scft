// Code which triggers syntactic compiler errors

// Lexer warnings/errors
// a = 1237498721947932749732947
// a = 3;
// while true {} // While loops are not allowed in this language

// --- parse_program
// if true {} // If statement is not allowed here
// for {} // For loop is not allowed here 
// break // break is not allowed here
// continue // continue is not allowed here
// return 43 // return is not allowed here
// 123 + 3 // [Expression] is not allowed here 

// --- parse_statement
// stmt = () { for i < 2 { break 3 + 5 } } // Unreachable statement following break
// stmt = () { for { continue stmt() } } // Unreachable statement following continue 
// stmt = () { doStuff() return 3 doOther() } // Unreachable statement following return 
// stmt = () { if true {} if 2 + 3 else doStuff() } // Expected a statement keyword like if, for, etc

// --- parse_block
// block = () { doStuff() // Mismatched curl brackets. Start of block found here

// --- parse_if
// ifStmt = () { if 2 + 3 {} else if 1 {} else // Unterminated code at end of file. Expected if keyword or {

// --- parse_for
// forLoop = () { for , i < 3, i++ {} } // Expected a statement
// forLoop = () { for i = 0, { a = 3 }, i++ {} } // Conditional expression can't be a block
// forLoop = () { for i = 0, if, i < 3 {} } // For loop condition must be an expression
// forLoop = () { for i = 0, i < 3, { a = 3 } {} } // Block statement is not allowed after the conditional expression
// forLoop = () { for i = 0, i < 3 {} } // Expected another statement after the condition
// forLoop = () { for i = 0, i < 20 i++ {} } // Expected a comma after the conditional
// forLoop = () { for i = 0, i = 20, i++ {} } // Replace = with ==
// forLoop = () { for a = 10 {} } // For loop condition must be an expression
// forLoop = () { for i = 10 if {} } // Expected a comma after the initial statement  

// --- assert_parse_decl
// See parse_program

// --- parse_function (parse_left_paren_expr)
// funcExpr = (a: string, if, 3 + 4) {} // Function parameter must declare a variable 
// funcExpr = (a: string, 3 + 3, b: bool, varName) {} // Expression is not allowed in funtion parameter list
// funcExpr = (a: int, )  {} // Expected another function parameter after the comma
// funcExpr = (a: bool 3 + 3) {} // Expected either , or ) in function parameter list
// funcExpr = (a: type // Unterminated code at end of file. Expected another function parameter
// funcExpr = (a: int) :: return 3 + 4 // Return is not allowed here
// funcExpr = (a: int) :: if // Must have an expression immediately after :: 
// funcExpr = (a: bool) // Expected a return type or function block
// funcExpr = (a: bool) 3 + 4 // Function body must start with { and end with }

// --- parse_function_type
// funcTypeExpr = (int, bool, ) -> int // Expected another type after the comma
// funcTypeExpr = (3 + (int // Not enough parenthesis
// funcTypeExpr = (int, bool Particle) -> 3 + 4 // Expected either , or ) in function type input list
// funcTypeExpr = (int, bool // Unterminated code at end of file. Expected another type
// funcTypeExpr = (string, double, string) // Function type must explicitly declare a return type

// --- parse_module
// modExpr = addOther(mod a = 3 } ) // Expected { after mod keyword
// modExpr = mod { a = 3 3 + 4 "other" c = 10 } // [Expression] is not allowed here
// modExpr = mod { a = 10.2 // Unterminated code at end of file. Expected closing }

// --- parse_ty
// tyExpr = ty a = "thing" } // Expected { after ty keyword
// tyExpr = ty { true a = -123 "other" b = false } // [Expression] is not allowed here
// tyExpr = ty { a = false // Unterminated code at end of file. Expected closing }

// --- parse_expr
// expr = 32 + // Expected an expression but instead reached the end of the file
// expr = 34 + if // Expected an expression but found [tokenType] instead
// expr = (3 + 4)) // Too many closing parenthesis

// --- parse_call
// call = add(3, ) // Expected another expression after the comma
// call = add(3, 5 + 6 "test") // Expected either , or ) in call argument list
// call = add(2, 55  // Unterminated code at end of file. Expected another expression

// --- parse_type_init
// init = Particle.{ a = 3, other, 123, 3 + 5, b = 2 } // [Expression] is not allowed here
// init = Particle.{ a = 5, b: int = 3 } // Variable declaration is not allowed here
// init = Particle.{ a = 6, b = 5 c = 3 + 5 } // Expected either , or }
// init = Particle.{ a = 7 // Unterminated code at end of file. Expected closing }

// --- parse_dot_op
// expr = call(other.root.43 + 4, 4) // Expected a member variable of [root] but found [token] instead    