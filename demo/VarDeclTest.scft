  /* val 
   = // 18446744073709551616 // 2147483648
   2147483648.
   */
   spaceMod => mod {
   Particle => ty {
     id: String => "testParticle"
    x: Int
    y: Int  
   } + Type
   asdf = 3
   Star => ty {
     bright: Bool
   }
   }
     val = (false && true + 2) % 5 + 3 * 8 
   t : Int => other + (5  + 2 - true   )  
    thing.that = 3
    strCool: String
    testFunc = (a: Int, thing: ty { x: int y: int }) {

      for i = 0, i == 4, i = i + 1 {
        testThing = 123
        continue
      }

      for {
        break
      }
      return 123 
       
    } 
    d = () {
      return 3 + ty {
        other = 3
        a = (a: Int) -> Void {
          stuff = (Int) -> Void {
            print()
            cool = 3
          }
        }
      } 
    }

  add: (Int, Int) -> Int => (a: Int, b: Int) :: a + b 
  call = callStuff(3, a + 5, "cool", Other.{})
  fail = () {}
  otherFail = () -> Void {
    3 = 4
  }

Point => ty {
  x: Int
  y: Int
}

other = module.part.x(3, 4 + 2).* + thing.*
a = 3 + ty {  
}  
Point = 3 + ty { }

testMod => mod {
}
2 = a