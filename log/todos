- => TODO
x => FINISHED

2/9/21
- Thoroughly test overflow detection for integer literals: var = 101234234324341234
- Support for direct type casting of numeric literals: 100l, 20.3f, etc
- Precision loss detection for double 
2/11/21
x Fix the syntax highlighting to correctly color numbers: 3_200_400 AND 3(5) 
- Implement type casting as a unary operator: var = (double) 3
- Implement new operator as a unary operator: thing: *Particle = new Particle.{}
- Consider the negation for int vs double: -(5) results in (0 - 5) and -(5.0) results in (0.0 - 5.0)
- Debate whether or not an ASTDeref should exist for ptrVal = (val.*)
2/17/21
x Add ast dump and VERBOSE_AST as command line flag: scft SnakeGame.scft -dump-ast 
x Add VERBOSE_AST to command line flags: scft CoolTestFile.scft -dump-ast -verbose 
- Add option to specifiy what lines to dump ast: scft Test.scft -dump-ast -verbose-41-59
2/18/21
- Consider refactoring parseModule and parseTypeDef to call a new function parseDeclList
x Think about new syntax for mod.{} and type.{} because it currently insinuates type instantiation
- Consider removing trailing whitespace in error messages: 
    3 + type {     
    ^^^^^^^^^^^^^^
- Optimize lexer tokenCache to only store less tokens 
2/19/21
x Think of a better way to deal with compiler flags and making them global
- Add warning limit as a flag -> certain amount of warnings lead to an error: "Too many warnings"
3/7/21
- Deal with FuncType ambiguity:
    // Can be interpreted as a function or a function type with a block statement on the following line
    a = () -> bool 
    {
        doStuff()
    }
3/8/21
x Fix syntax highlighting to correctly highlight "//" (single line comment with no comment)
- Create context system in diagnostics to report "Error in [context]" at the start of a collection of various errors
- Parse function parameter as a declaration
- Build diagnostics string in one cycle
3/9/21
x Format diagnostics indicator as the following:
    3 + type {
    ^---------
    3 + 5 - 6 + 4
        ^---^
x Switch to snake case for functions
- Make free-floating expressions illegal: 3 + 5 should throw an error but doStuff(3, 4) should not
3/14/21
- Try to remove dependency on lexer.lastToken()
- Consider moving parse_func_type into parse_left_paren_expr (make massive function)
- Redesign "recover mode" in the diagnostics stuff
x Delete while loops in favor of for loops
3/18/21
- Rewrite parse_left_paren_expr using a shift-reduce and state machine
- Handle \ (\t, \n, \r, etc) and don't parse them as identifiers: a\n: int = 2 should not be valid
3/23/21
- Generate typechecking IR on a per-expression basis
    doStuff = () {
        if 3 < mult(5, b) { // Generate IR for #assert_bool 3 < mult(5, b)
            c = 4 + 5 // Generate IR for #assert_type c: _ = 4 + 5
        }
    }
- Rethink what a constant function really means: foo => () {} Determine function purity in a different way or disregard idea
- Think about dynamic type checking
    randType: Type

    if rand_int(0) == 1 {
        randType = Point
    } else {
        randType = String 
    }

    // a = 5 - randType.x * 3 // Throw error because randType.x is not known
    a = 5 - (<Point> randType).x * 3
- Transform ASTNode into a union of various types